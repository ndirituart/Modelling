<template>
  <div id="app">
    <div class="content">
      <img alt="Vue logo" src="./assets/MyApp Logo.png">
      <h1>Marketing Budget Form</h1>
      <form>
        <div>
          <label>Target clicks: </label>
          <input type="number" v-model="targetClicks" placeholder="Enter your target number of leads">
          <br>
        </div>
        <div>
          <label>Budget: </label>
          <input type="number" v-model="budget" placeholder="Enter your budget in Ksh.">
          <br>
        </div>
        <button type="button" @click="distributeFunds">Distribute Funds</button>
      </form>
      <HelloWorld msg="Thank you for trusting"/>
      <div v-if="allocation">
        <h2>Allocation Results:</h2>
        <p>Facebook: {{ allocation.facebook }}</p>
        <p>LinkedIn: {{ allocation.linkedin }}</p>
        <p>Instagram: {{ allocation.instagram }}</p>
        <p>WhatsApp: {{ allocation.whatsapp }}</p>
      </div>
    </div>
  </div>
</template>

<script>
import HelloWorld from './components/HelloWorld.vue';

export default {
  name: 'App',
  components: {
    HelloWorld
  },
  data() {
    return {
      targetClicks: '',
      budget: '',
      allocation: null
    }
  },
  methods: {
    async distributeFunds() {
// add constraints when there is no input, input is zero and auto-refreshing after an input is done
      // Function to refresh fields and clear results
      resetFields() {
        this.targetClicks = '';
        this.budget = '';
        this.allocation = null;
      },

    // Function to distribute funds with added constraints
    async distributeFunds() {
        // Check if either targetClicks or budget is not provided
        if (!this.targetClicks || !this.budget) {
          alert("Please type in your target clicks or budget...");
          return;
        }

        // Check if targetClicks or budget is zero
        if (parseInt(this.targetClicks) === 0 || parseFloat(this.budget) === 0) {
          this.allocation = {
            facebook: 0,
            linkedin: 0,
            instagram: 0,
            whatsapp: 0
          };
          alert("Target clicks or budget is zero, allocating zero to each budget.");
          return;
        }

        try {
          const response = await fetch('http://127.0.0.1:5000/calculate_allocation', {// Correction 1...ensure same endpoint
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              target_clicks: parseInt(this.targetClicks),
              total_budget: parseFloat(this.budget)
            }),
          });
          if (response.ok) {
            const data = await response.json();
            this.allocation = data.budget_allocation;// Correction 2....we did not handle the response data
            this.targetClicks = ''; // Reset the field
            this.budget = '';
          } else {
            throw new Error('Failed to fetch');
          }
        } catch (error) {
          console.error('Error distributing funds:', error);
        }
      }
    }
  }
}
</script>

<style>
#app {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
}

.content {
  text-align: center;
}
</style>
